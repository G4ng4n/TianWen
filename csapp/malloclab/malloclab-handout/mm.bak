/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 * 
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Rereplace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "ateam",
    /* First member's full name */
    "Harry Bovik",
    /* First member's email address */
    "bovik@cs.cmu.edu",
    /* Second member's full name (leave blank if none) */
    "",
    /* Second member's email address (leave blank if none) */
    ""
};
#define DEBUG 1
/* If you want debugging output, use the following macro.  When you hand
 * in, remove the #define DEBUG line. */
#ifdef DEBUG
# define DBG_PRINTF(...) printf(__VA_ARGS__)
# define CHECKHEAP(verbose) mm_checkheap(verbose)
#else
# define DBG_PRINTF(...)
# define CHECKHEAP(verbose)
#endif


/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8

/* rounds up to the nearest multiple of ALIGNMENT */

#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)

#define BINS_NUM 16

/* Basic constants and macros */
#define WSIZE 4 /* Word and header/footer size (bytes) */
#define DSIZE 8 /* Double word size (bytes) */
#define CHUNKSIZE (1<<12) /* Extend heap by this amount (bytes) */
#define INITCHUNKSIZE (1<<6)

#define MAX(x, y) ((x) > (y)? (x) : (y))
#define MIN(x, y) ((x) < (y)? (x) : (y))
/* Pack a size and allocated bit into a word */
#define PACK(size, alloc) ((size) | (alloc))

/* Read and write a word at address p */
#define GET(p) (*(unsigned int *)(p))
#define PUT(p, val) (*(unsigned int *)(p) = (val))

/* Read the size and allocated fields from address p */
#define GET_SIZE(p) (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1)

/* Given block ptr bp, compute address of its header and footer */
#define HDRP(bp) ((char *)(bp) - WSIZE)
#define FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)

/* Given block ptr bp, compute address of next and t_listvious blocks */
#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))

/* for explict linkedlist */
#define FDP(ptr) ((char *)(ptr))
#define BKP(ptr) ((char *)(ptr) + WSIZE)

#define FD(ptr) (*(char **)(ptr))
#define BK(ptr) (*(char **)(BKP(ptr)))


#define SET_PTR(p, ptr) (*(unsigned int *)(p) = (unsigned int)(ptr))

static void *extend_heap(size_t words);
static void replace(void *bp, size_t asize);
static void *coalesce(void *bp);
static void insert(void *bp, size_t size);
static void delete(void *bp);
static size_t get_asize(size_t size);
static void *realloc_coalesce(void *bp,size_t newSize,int *isNextFree);
static void realloc_replace(void *bp,size_t asize);
void checkheap(int verbose);
void mm_checkheap(int verbose);
void *bins[BINS_NUM];
char *heap_listp;

static void *extend_heap(size_t words)
{
    char *bp;
    size_t size;

    /* Allocate an even number of words to maintain alignment */
    size = (words % 2) ? (words+1) * WSIZE : words * WSIZE;
    if ((long)(bp = mem_sbrk(size)) == -1)
        return NULL;

    /* Initialize free block header/footer and the epilogue header */
    
    PUT(HDRP(bp), PACK(size, 0)); /* Free block header */
    PUT(FTRP(bp), PACK(size, 0)); /* Free block footer */
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); /* New epilogue header */

    /* Coalesce if the t_listvious block was free include insert*/
    return coalesce(bp);
}
// changed
int mm_init(void)
{
    int i;
    for(i=0;i<BINS_NUM;i++){
        bins[i] = NULL;
    }
    // 初始化freelist, 创建特殊的头尾空闲块来
    if ((heap_listp = mem_sbrk(4*WSIZE)) == (void*)-1) return -1;
    PUT(heap_listp, 0); // alignment padding
    PUT(heap_listp + (1 * WSIZE), PACK(DSIZE, 1)); //prologue header
    PUT(heap_listp + (2 * WSIZE), PACK(DSIZE, 1)); //prologue footer
    PUT(heap_listp + (3 * WSIZE), PACK(0, 1)); //epilogue header
    heap_listp += (2 * WSIZE);

    if (!extend_heap(CHUNKSIZE/WSIZE))
        return -1;
    return 0;
}

static void replace(void *bp, size_t asize)//done
{
    size_t size = GET_SIZE(HDRP(bp));
    delete(bp);
    if ((size - asize) < (2*DSIZE)) {
        PUT(HDRP(bp),PACK(size,1));
        PUT(FTRP(bp),PACK(size,1));
    }
     else {
        PUT(HDRP(bp),PACK(asize,1));
        PUT(FTRP(bp),PACK(asize,1));
        PUT(HDRP(NEXT_BLKP(bp)),PACK(size - asize,0));
        PUT(FTRP(NEXT_BLKP(bp)),PACK(size - asize,0));
        insert(NEXT_BLKP(bp),size - asize);
    }
}
static void insert(void *bp, size_t size)
{
    int bin_num=0;
    size_t i;
    for(i=size; i>1 && bin_num<BINS_NUM-1; i>>=1){
        bin_num++;
    }
    //对应大小的分离链表
    char* list = bins[bin_num];
    //前一个节点
    char* t_list = NULL;

    // 遍历，找到适合插入的点
    while(list && size>GET_SIZE(HDRP(list))){
        t_list = list;
        list = BK(list);
    }

    if(!list && !t_list){
        //链表为空，直接放入
        bins[bin_num] = bp;
        SET_PTR(FDP(bp), NULL);
        SET_PTR(BKP(bp), NULL);
    }else if(!list && t_list){
        // 插入到末尾
        SET_PTR(FDP(bp), t_list); // 设置当前块的前驱指针
        SET_PTR(BKP(bp), NULL); // 设置当前块的后继指针
        SET_PTR(BKP(t_list), bp); // 设置前驱块的后继指针
    }else if(!t_list){
        // 插入到表头
        bins[bin_num] = bp;
        SET_PTR(FDP(list), bp); // 设置原表头块的前驱指针
        SET_PTR(BKP(bp), list); // 设置当前块的后继指针
        SET_PTR(FDP(bp), NULL); // 设置当前块的前驱指针
    }else{
        //设置前驱、后继、前驱块后继指针、后继块前驱指针
        SET_PTR(FDP(bp), t_list);
        SET_PTR(BKP(bp), list);
        SET_PTR(FDP(list), bp);
        SET_PTR(BKP(t_list), bp);
    }
}
static void delete(void* bp){
    size_t size = GET_SIZE(HDRP(bp));
    size_t i;
    int bin;
    for(i = size; bin < BINS_NUM-1 && i>1; i>>=1){
        // 计算所属链表
        bin++;
    }
    // 解除链表块前驱后继对删除块的引用
    if(FD(bp) == NULL) {
        // 链表首块
        bins[bin] = BK(bp);
        if(BK(bp)){
            SET_PTR(FDP(BK(bp)), NULL);
        }
    }else if(!BK(bp)){
        // 链表尾块
        SET_PTR(BKP(FD(bp)), NULL);
    }else{
        // FD->bk = BK, BK->fd = FD
        SET_PTR(BKP(FD(bp)), BK(bp));
        SET_PTR(FDP(BK(bp)), FD(bp));
    }
}
void *mm_malloc(size_t size)
{
    size_t asize, search;
    size_t extendsize;
    char *bp = NULL;

    if (size == 0)
        return NULL;
    
    asize = DSIZE * ((size + (DSIZE) + (DSIZE - 1)) / DSIZE);
    search = asize;
    int bin_num;
    for (bin_num = 0; bin_num < BINS_NUM; bin_num++, search >>= 1) {
        if ((search > 1) || (bins[bin_num] == NULL)) continue;
        char *list = bins[bin_num];
        for(;list ;list = BK(list)){
            if (GET_SIZE(HDRP(list)) < asize) continue;
            bp = list;
            break;
        }
        if (bp) break;
    }
    if (!bp) {
        extendsize = MAX(asize,CHUNKSIZE);
        if ((bp = extend_heap(extendsize/WSIZE)) == NULL)
            return NULL;
    }
    replace(bp, asize);
    return bp;
}

static void* coalesce(void *bp)
{
    size_t prev = GET_ALLOC(HDRP(PREV_BLKP(bp)));
    size_t next = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size = GET_SIZE(HDRP(bp));

    if (prev && !next){
        // 只有后一块释放
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        delete(NEXT_BLKP(bp)); // 删除释放块，重新利用
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size, 0));
    }
    else if (!prev && next){
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        delete(PREV_BLKP(bp));
        PUT(FTRP(bp), PACK(size, 0));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }
    else if(!(prev||next)){
        // 合并前后块
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
        delete(PREV_BLKP(bp));
        delete(NEXT_BLKP(bp));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }
    insert(bp, size);
    return bp;
}
void mm_free(void *bp)
{
    size_t size = GET_SIZE(HDRP(bp));
    PUT(HDRP(bp), PACK(size, 0));
    PUT(FTRP(bp), PACK(size, 0));
    coalesce(bp);
    // CHECKHEAP(1);
}
void *mm_realloc(void *ptr, size_t size)
{
    // if (ptr == NULL)
    //    return mm_malloc(size);
    // if (size == 0) {
    //    mm_free(ptr);
    //    return NULL;
    // }

    // void *newptr;
    // size_t asize, oldsize;
    // oldsize = GET_SIZE(HDRP(ptr));
    // asize = get_asize(size);
    // if(oldsize<asize)
    // {
    //     int isnextFree;
    //     char *bp = realloc_coalesce(ptr,asize,&isnextFree);
    //     if(isnextFree==1){ /*next block is free*/
    //         realloc_replace(bp,asize);
    //     } else if(isnextFree ==0 && bp != ptr){ /*t_listvious block is free, move the point to new address,and move the payload*/
    //         memcpy(bp, ptr, size);
    //         realloc_replace(bp,asize);
    //     }else{
    //     /*realloc_coalesce is fail*/
    //         newptr = mm_malloc(size);
    //         memcpy(newptr, ptr, size);
    //         mm_free(ptr);
    //         // CHECKHEAP(1);
    //         return newptr;
    //     }
    //     // CHECKHEAP(1);
    //     return bp;
    // }
    // else if(oldsize>asize)
    // {/*just change the size of ptr*/
    //     realloc_replace(ptr,asize);
    //     // CHECKHEAP(1);
    //     return ptr;
    // }
    // // CHECKHEAP(1);
    // return ptr;
    void *oldptr = ptr;
    void *newptr;
    size_t old_size;

    newptr = mm_malloc(size);
    if (newptr == NULL) return NULL;
    old_size = GET_SIZE(HDRP(oldptr));
    if (old_size < size)
      size = old_size;
    memcpy(newptr, oldptr, size - WSIZE);
    mm_free(oldptr);
    return newptr;
}

static size_t get_asize(size_t size) 
{
    size_t asize;
    if(size <= DSIZE){
        asize = 2*(DSIZE);
    }else{
        asize = ALIGN(size + DSIZE);
    }
    return asize;
}
static void *realloc_coalesce(void *bp,size_t newSize,int *isNextFree)
{
    size_t  prev = GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t  next = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size = GET_SIZE(HDRP(bp));
    *isNextFree = 0;
    /*coalesce the block and change the point*/
    if(prev && !next)
    {
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        if(size>=newSize)
        {
            delete(NEXT_BLKP(bp));
            PUT(HDRP(bp), PACK(size,1));
            PUT(FTRP(bp), PACK(size,1));
            *isNextFree = 1;
        }
    }
    else if(!prev && next)
    {
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        if(size>=newSize)
        {
            delete(PREV_BLKP(bp));
            PUT(FTRP(bp),PACK(size,1));
            PUT(HDRP(PREV_BLKP(bp)),PACK(size,1));
            bp = PREV_BLKP(bp);
        }
    }
    else if(!prev && !next)
    {
        size +=GET_SIZE(FTRP(NEXT_BLKP(bp)))+ GET_SIZE(HDRP(PREV_BLKP(bp)));
        if(size>=newSize)
        {
            delete(PREV_BLKP(bp));
            delete(NEXT_BLKP(bp));
            PUT(FTRP(NEXT_BLKP(bp)),PACK(size,1));
            PUT(HDRP(PREV_BLKP(bp)),PACK(size,1));
            bp = PREV_BLKP(bp);
        }
    }
    return bp;
}
static void realloc_replace(void *bp,size_t asize)
{
    size_t csize = GET_SIZE(HDRP(bp));
    PUT(HDRP(bp),PACK(csize,1));
    PUT(FTRP(bp),PACK(csize,1));
}

/* below code if for check heap invarints */

static void printblock(void *bp) 
{
    long int hsize, halloc, fsize, falloc;

    hsize = GET_SIZE(HDRP(bp));
    halloc = GET_ALLOC(HDRP(bp));  
    fsize = GET_SIZE(FTRP(bp));
    falloc = GET_ALLOC(FTRP(bp));  

    if (hsize == 0) {
        printf("%p: EOL\n", bp);
        return;
    }

    printf("%p: header: [%ld:%c] footer: [%ld:%c]\n", bp, 
           hsize, (halloc ? 'a' : 'f'), 
           fsize, (falloc ? 'a' : 'f')); 
}
static int checkblock(void *bp) 
{
    //area is aligned
    if ((size_t)bp % 8)
        printf("Error: %p is not doubleword aligned\n", bp);
    //header and footer match
    if (GET(HDRP(bp)) != GET(FTRP(bp)))
        printf("Error: header does not match footer\n");
    size_t size = GET_SIZE(HDRP(bp));
    //size is valid
    if (size % 8)
       printf("Error: %p payload size is not doubleword aligned\n", bp);
    return GET_ALLOC(HDRP(bp));
}
static void printlist(void *list, long size) 
{
    long int hsize, halloc;

    for(;list != NULL;list = BK(list))
    {
        hsize = GET_SIZE(HDRP(list));
        halloc = GET_ALLOC(HDRP(list));
        printf("[listnode %ld] %p: header: [%ld:%c] t_listv: [%p]  next: [%p]\n",
           size, list, 
           hsize, (halloc ? 'a' : 'f'), 
           FD(list), BK(list)); 
    }
}
static void checklist(void *list, size_t bin_num) 
{
    void *t_list = NULL;
    long int hsize, halloc;
    for(;list != NULL;list = BK(list))
    {
        if (FD(list) != t_list) printf("Error: FD point error\n");
        if (t_list != NULL && BK(t_list) != list) printf("Error: BK point error\n");
        hsize = GET_SIZE(HDRP(list));
        halloc = GET_ALLOC(HDRP(list));
        if (halloc) printf("Error: list node should be free\n");
        if (t_list != NULL && (GET_SIZE(HDRP(t_list)) > hsize)) 
           printf("Error: list size order error\n");
        if (hsize < bin_num || ((bin_num != (1<<15)) && (hsize > (bin_num << 1)-1)))
           printf("Error: list node size error\n");
        t_list = list;
    }
}
void mm_checkheap(int verbose)  
{ 
    checkheap(verbose);
}
void checkheap(int verbose) 
{
    char *bp = heap_listp;

    if (verbose)
        printf("Heap (%p):\n", heap_listp);

    if ((GET_SIZE(HDRP(heap_listp)) != DSIZE) || !GET_ALLOC(HDRP(heap_listp)))
        printf("Bad prologue header\n");
    // block level
    checkblock(heap_listp);
    int t_list_free = 0;
    for (bp = heap_listp; GET_SIZE(HDRP(bp)) > 0; bp = NEXT_BLKP(bp)) {
        if (verbose) 
            printblock(bp);
        int cur_free = checkblock(bp);
        //no contiguous free blocks
        if (t_list_free && cur_free) {
            printf("Contiguous free blocks\n");
        }
   
    }
    //i level
    int i = 0, bin_numsize = 1;
    for (; i < BINS_NUM; i++) {
        if (verbose) 
            printlist(bins[i], bin_numsize);
        checklist(bins[i],bin_numsize);
        bin_numsize <<= 1;
    }

    if (verbose)
        printblock(bp);
    if ((GET_SIZE(HDRP(bp)) != 0) || !(GET_ALLOC(HDRP(bp))))
        printf("Bad epilogue header\n");
}
